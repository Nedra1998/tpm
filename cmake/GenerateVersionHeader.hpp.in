/**
 * @file version.hpp
 * @brief Generated versioning information
 *
 * This file is automatically generated by CMake at configuration. It provies a
 * number of versioning variables for the code to make use of, including the
 * major, minor, and patch version, in addition to the current git commit hash,
 * for exact build determination, and release type.
 *
 * This header also provides version comparison functions. These can be used to
 * check comparisons between versions, and require a minimum or maximum version
 * available.
 *
 * This version information follows
 * [SemVer](https://semver.org/spec/v2.0.0.html), and is automatically generated
 * by CMake at configuration time. Given a version number
 * `MAJOR.MINOR.PATCH-PRE_RELEASE+BUILD`, increment the:
 *
 * 1. `MAJOR` version when you make incompatible API changes,
 * 2. `MINOR` version when you add functionality in a backwards compatible
 * manner, and
 * 3. `PATCH` version when you make backwards compatible bug fixes.
 *
 * The `PRE_RELEASE` value is set to the CMake build type configured at compile
 * time. The `BUILD` is set to the current git hash, to specify the specific
 * version of the project.
 *
 * @warning Do not manually edit this file. Always use CMake to generate the the
 * files with the newest versioning information.
 *
 * @author CMake
 */

#ifndef @PROJECT_UPPER@_VERSION_HPP_
#define @PROJECT_UPPER@_VERSION_HPP_

#include <string>

namespace @PROJECT_LOWER@ {
/**
 * @brief Provides versioning information for all @PROJECT_NAME@ executables and
 * libraries.
 *
 * This namespace provides the project metadata generated by CMake containing
 * the versioning information for the project. These variables should be
 * adjusted in CMake file, and not in the source.
 *
 * This namespace also provides some version string comparison function, which
 * make it easy to test the version available.
 *
 * This version information follows
 * [SemVer](https://semver.org/spec/v2.0.0.html), and is automatically generated
 * by CMake at configuration time. Given a version number
 * `MAJOR.MINOR.PATCH-PRE_RELEASE+BUILD`, increment the:
 *
 * 1. `MAJOR` version when you make incompatible API changes,
 * 2. `MINOR` version when you add functionality in a backwards compatible
 * manner, and
 * 3. `PATCH` version when you make backwards compatible bug fixes.
 *
 * The `PRE_RELEASE` value is set to the CMake build type configured at compile
 * time. The `BUILD` is set to the current git hash, to specify the specific
 * version of the project.
 */
namespace version {

/**
 * This is generated from the `core`, the `release` if it has been defined, and
 * the `build`.
 *
 * @sa core release build
 */
static const std::string semver = "@PROJECT_SEMVER@";
/**
 * This is generated from the `major`, `minor`, and `patch`.
 *
 * @sa major minor patch
 */
static const std::string core = "@PROJECT_VERSION@";
/**
 * This defines the build type that was used during compilation. It represents
 * the `CMAKE_BUILD_TYPE` variable that is set during configuration.
 */
static const std::string release = "@PROJECT_VERSION_RELEASE@";
// clang-format off
/**
 * This defines the project major version. It should be manually incrented in
 * the project root *CMakeLists.txt*, when an incompatible API change is made.
 */
static const unsigned int major = @PROJECT_VERSION_MAJOR@;
/**
 * This defines the project minor version. It should be manually incrented in
 * the project root *CMakeLists.txt*, when functionality is added in a backwards
 * compatible manner.
 */
static const unsigned int minor = @PROJECT_VERSION_MINOR@;
/**
 * This defines the project minor version. It should be manually incrented in
 * the project root *CMakeLists.txt*, when a backwards compatible bug fix is
 * made.
 */
static const unsigned int patch = @PROJECT_VERSION_PATCH@;
// clang-format on
/**
 * This defines the first 7 characters in the git commit hash. This is usually
 * sufficent for the purposes of determining the exact version of a build.
 */
static const std::string build = "@PROJECT_VERSION_BUILD@";
} // namespace version
} // namespace @PROJECT_LOWER@

#endif // @PROJECT_UPPER@_VERSION_HPP_
